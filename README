Fourthquare
==============

Fourthquare is a Common Lisp wrapper for the foursquare API.


Currently it is a work in progress, but all endpoints are supported through the get-value and query functions.

$> (get-value (user-data my-user) data "user" "checkins" "items")

or

$> (query (user-authenticator user) "user/self")

etc.

But some other functions make this even easier!

$> (defparameter me (find-user <authenticator> "self"))


$> (recent-checkins me)


...etc.


Tutorial
-----

###Authentication

Register your application with http://developer.foursquare.com to receive your client-id and client-secret. You will need to provide the redirect-uri for your application (see below). 

Use these to generate your authorization uri by passing them (as strings) to the `#'authorize-uri` function

````lisp
    > (authorize-uri "MYCLIENTIDASDFASDF" "MYCLIENTSECRETQWERTY" "http://localhost:8080/callback/foursquare")
    "https://foursquare.com/oauth2/authenticate?client_id=MYCLIENTID&response_type=code&redirect_uri"
````

Redirect the user to this URI (an HTTP status code of 307 is appropriate), and they will be prompted to authorize your access to their foursquare account. (If they are not currently logged in to foursquare, they will be prompted to log in first before authorizing).

When the user has authorized your access to their account, they will be redirected back to the redirect URI that you have specified and registered, and the code will be passed as a GET parameter (conveniently named 'code').

Next, call `#'set-token` with the same paramters as before as well as this new code (as a string).

````lisp
    > (set-token "MYCLIENTIDASDFASDF" "MYCLIENTSECRETQWERTY" "http://localhost:8080/callback/foursquare" "CODEZXCVB")
    "https://foursquare.com/oauth2/access_token?client_id=MYCLIENTIDASDFASDF&client_secret=MYCLIENTSECRETQWERTY&grant_type=authorization_code&redirect_uri=http://localhost:8080/callback/foursquare&code=CODEZXCVB"

````

This will produce a new url; issue an HTTP-POST request to this URL, and you will receive a JSON response (ie, type 'application/json') which contains the access token. Store this token; it will be used to authenticate subsequent API requests. 


You may save this access token (as a string) and use it when a function requires an authenticator.

###Queries

The first thing you probably want to do is find the current user - you can do this using the `#'find-user` function, which takes *either* a userid *or* the string "self" (in which case it will return the user information for the account associated with the current authenticator/access token.

````lisp
    > (find-user "<access-token-you-just-received>" "self")
    #S(USER
       :AUTHENTICATOR "<access-token>"
       :DATA #<HASH-TABLE :TEST EQL :COUNT 23 {100627D5B3}>)
````

Note that calls to find-user are *not* automatically cached by this library; due to the foursquare API rate limiting, you will want to store the results of this call to avoid being throttled. This can be nicely encapsulated with the corresponding authenticator/access token in the struct *user*


````lisp
    > (defparameter *me* (make-user "<access-token>" (find-user "<access-token-you-just-received>" "self")))
    #S(USER
       :AUTHENTICATOR "<access-token>
       :DATA #<HASH-TABLE :TEST EQL :COUNT 23 {1006342653}>)
````

The data associated with a user is simply stored as a hash; this can be accessed with the `#'user-data` function that is automatically defined for the *user* struct.

Also, strictly for convenience, `#'hash-keys` has been provided (via hash-table-keys in alexandria) to check the keys associated with a given hash-table.

````lisp
    > (hash-keys (user-data me))
    (REFERRALID SCORES PHOTOS TODOS REQUESTS FOLLOWING CHECKINS MAYORSHIPS BADGES
     PINGS CONTACT BIO HOMECITY GENDER LISTS TIPS TYPE FRIENDS PHOTO RELATIONSHIP
     LASTNAME FIRSTNAME ID)
````

   
The 'checkins key will contain a hash-table of strings with the number of checkins associated with the user (accessible by the field "count"). If the user fetched is a friend, then the "items" field wil also be provided, providing the user's most-recent checkin. 

This can be accessed easily by the `#'user-checkins` convenience function.

````lisp
    > (user-checkins me)
       (#<HASH-TABLE :TEST EQUAL :COUNT 12 {100630C5A3}>)
````
  
Which returns, as expected, a list containing the checkins returned by the original `#'find-user` query. (In this case only a single checkin will be returned; depending on the endpoint and/or query parameters, multiple checkins may be found here).

The checkin objects are stored as hash-tables as well (these are simply hash-table mappings of the JSON objects returned by the foursquare API). For example, the user's checkin contains several fields:

````lisp
    > (hash-keys (car (user-checkins me)))
      ("comments" "photos" "like" "likes" "venue" "timeZoneOffset" "timeZone"
       "isMayor" "shout" "type" "createdAt" "id")
````

One of these fields is the venue, and if we are interested, we can find more information about the venue:

```lisp
    > (hash-keys (get-value  (car (user-checkins me)) "venue"))
      ("listed" "beenHere" "friendVisits" "like" "likes" "stats" "verified"
       "categories" "location" "contact" "name" "id")
````


Or just simply get the venueid, perhaps to make another query against the /venues/ endpoint:

````lisp
    > (defparameter last-venue-id (get-value (car (user-checkins me)) "venue" "id"))
````

Note that, while wrapper functions have not (yet) been provided for every endpoint and aspect in the API, the `#'query` function is sufficiently generic to apply to any query necessary.

````lisp
    > (defparameter venue-query-response (query authenticator (concatenate 'string "/venues/" last-venue-id)))
````

[As described in the foursquare API documenation](https://developer.foursquare.com/overview/responses) a query returns a hash table with three fields: "response", "notifications", and "meta". "response" contains the actual information sought by the query: 

````lisp
    > (defparameter most-recent-venue (get-value venue-result "response" "venue"))
    > (print (hash-keys most-recent-venue))
        ("pageUpdates" "listed" "timeZone" "canonicalUrl" "shortUrl" "tags" "tips"
         "mayor" "createdAt" "hereNow" "photos" "specials" "beenHere" "friendVisits"
         "dislike" "like" "likes" "stats" "verified" "categories" "location" "contact"
         "name" "id") 
````

whereas "meta" is useful for identifying any errors, as it contains the http status code:

````lisp
    > (get-value venue-query-response "meta" "code")
      200
````

The full list of error codes and the complete query response structure can be found at the link provided above.

The "notifications" field is provided for certain kinds of queries, though the structure for that response is admittedly a bit cumbersome:

````lisp
    > (get-value (car (get-value venue-response "notifications")) "type")
      "notificationTray"

    > (get-value (car (get-value venue-response "notifications")) "item" "unreadCount")
      0
````

(In this particular case, the number of unread tray notifications is provided; this behavior will vary depending on the query and may change over time, so this field in your response may look slightly different.)



For further information, the [foursquare API documentation](https://developer.foursquare.com/docs/) should answer many questions, as the structure of the JSON reponses here have been intentionally preserved with the design of this library, as much as possible.

Patches, Forks, and Contributions
-------------------------------

Contributions welcome! Email is a faster way to contact me, so git patches (git format-patch --cover-letter -M origin/master) are preferred, but Github pull requests work too.


Contact
-------

My email address is listed in the commit logs - please let me know if there are any issues using this library. Or, if you found it helpful, I'd like to know too! :-)


License
-------

This wrapper is currently a work in progress. It was completed in less than 24 hours at the 2012 hackNY hackathon, and it was a lot of fun! But it still needs some work. It was presented at the hackNY hackathon demos, so others who missed the event may want to see it too, especially since it documents a quest for the 'perfect' Common Lisp webapp libraries. I'll clean it up once I've had more time (and sleep), and I plan on releasing it under an MIT/X11 license as well at that point, as many other foursquare libraries are. The full license is in the LICENSE file; if you have any other questions, you can contact me at dev@chimeracoder.net.
